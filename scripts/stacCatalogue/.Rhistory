buffer.box = 0,
layers = c("bio1", "bio2"),
srs.cube = proj,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
cube
plot(cube)
load_cube <- function(stac_path =
"http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c('chelsa-clim'),
use.obs = T,
obs = NULL,
lon = "lon",
lat = "lat",
buffer.box = 0,
bbox = NULL,
layers = NULL,
variable = NULL,
srs.cube = "EPSG:32198",
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 2000,
temporal.res  = "P1Y",
aggregation = "mean",
resampling = "near") {
# Creating RSTACQuery  query
s <- rstac::stac(stac_path)
if (use.obs) {
if (inherits(obs, "data.frame")) {
# Reproject the obs to the data cube projection
proj.pts <- project_coords(obs, lon = lon, lat = lat, proj_from = srs.cube)
} else {
proj.pts <- obs
}
# Create the extent (data cube projection)
bbox.proj <- points_to_bbox(proj.pts, buffer = buffer.box)
left <- bbox.proj$xmin
right <- bbox.proj$xmax
bottom <- bbox.proj$ymin
top <- bbox.proj$ymax
# Create the bbxo (WGS84 projection)
bbox.wgs84 <- bbox.proj %>%
sf::st_bbox(crs = srs.cube) %>%
sf::st_as_sfc() %>%
sf::st_transform(crs = 4326) %>%
sf::st_bbox()
} else {
bbox.proj <- bbox
left <- bbox.proj$xmin
right <- bbox.proj$xmax
bottom <- bbox.proj$ymin
top <- bbox.proj$ymax
if (left > right) stop("left and right seem reversed")
if (bottom > top) stop("bottom and top seem reversed")
bbox.wgs84 <- c(left,
right,
top,
bottom) %>%
sf::st_bbox(crs = srs.cube) %>%
sf::st_as_sfc() %>%
sf::st_transform(crs = 4326) %>%
sf::st_bbox()
}
if (!is.null(t0)) {
# Create datetime object
datetime <- format(lubridate::as_datetime(t0), "%Y-%m-%dT%H:%M:%SZ")
} else {
it_obj_tmp <- s |> #think changing it for %>%
rstac::stac_search(bbox = bbox.wgs84, collections = collections) |> rstac::get_request()
datetime <- it_obj_tmp$features[[1]]$properties$datetime
t0 <- datetime
t1 <- datetime
}
if (!is.null(t1) && t1 != t0) {
datetime <- paste(datetime,
format(lubridate::as_datetime(t1), "%Y-%m-%dT%H:%M:%SZ"),
sep = "/")
}
RCurl::url.exists(stac_path)
# CreateRSTACQuery object with the subclass search containing all search field parameters
it_obj <- s |> #think changing it for %>%
rstac::stac_search(bbox = bbox.wgs84, collections = collections,
datetime = datetime) |> rstac::get_request()
if (is.null(spatial.res)) {
name1 <- unlist(lapply(it_obj$features, function(x){names(x$assets)}))[1]
spatial.res <-  it_obj$features[[1]]$assets[[name1]]$`raster:bands`[[1]]$spatial_resolution
}
# bbox in decimal lon/lat
# If no layers is selected, get all the layers by default
if (is.null(layers)) {
layers <- unlist(lapply(it_obj$features, function(x){names(x$assets)}))
}
#
# Creates an image collection
if(!is.null(variable)) {
st <- gdalcubes::stac_image_collection(it_obj$features, asset_names = layers,
property_filter = function(x) {x[["variable"]] %in% variable})
} else {
st <- gdalcubes::stac_image_collection(it_obj$features, asset_names = layers)
}
v <- gdalcubes::cube_view(srs = srs.cube,  extent = list(t0 = t0,  t1 = t1,
left = left, right = right,
top = top, bottom = bottom),
dx = spatial.res, dy = spatial.res, dt = temporal.res, aggregation = aggregation, resampling = resampling)
# gdalcubes::gdalcubes_options(parallel = 4)
cube <- gdalcubes::raster_cube(st, v, chunking = c(1, 500, 500))
return(cube)
}
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = presence,
buffer.box = 0,
layers = c("bio1", "bio2"),
srs.cube = proj,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
plot(cube)
layers <- c("bio6", "bio13")
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = obs.coords.proj,
buffer.box = 0,
layers = layers,
srs.cube = srs.cube,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
cube %>% select_bands(c("bio6", "bio13")) %>%  plot()
my.raster <- cube_to_raster(cube, format = "raster")
plot(my.raster)
View(obs.coords.proj)
obs.coords.proj <- create_projection(presence, lon = "lon", lat = "lat",
srs.obs, srs.cube)
obs.coords.proj <- create_projection(obs_data, lon = "decimalLongitude", lat = "decimalLatitude",
proj_from = "+proj=longlat +datum=WGS84", proj_to = proj,new_lon = "lon", new_lat = "lat")
View(obs.coords.proj)
obs.coords.proj <- create_projection(presence, lon = "lon", lat = "lat",
srs.obs, srs.cube) %>% dplyr::select(lon, lat)
srs.obs
srs.obs = proj
obs.coords.proj <- create_projection(presence, lon = "lon", lat = "lat",
srs.obs, srs.cube) %>% dplyr::select(lon, lat)
View(obs.coords.proj)
layers <- c("bio6", "bio13")
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = obs.coords.proj,
buffer.box = 0,
layers = layers,
srs.cube = srs.cube,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
my.raster <- cube_to_raster(cube, format = "raster")
View(obs.coords.proj)
complete.cases(obs.coords.proj)
obs.coords.proj <- obs.coords.proj[complete.cases(obs.coords.proj),]
comp <-  complete.cases(obs.coords.proj)
obs.coords.proj <-  obs.coords.proj[comp, ]
comp <-  complete.cases(obs.coords.proj)
obs.coords.proj <-   obs.coords.proj[!duplicated(obs.coords.proj), ]
load_cube <- function(stac_path =
"http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c('chelsa-clim'),
use.obs = T,
obs = NULL,
lon = "lon",
lat = "lat",
buffer.box = 0,
bbox = NULL,
layers = NULL,
variable = NULL,
srs.cube = "EPSG:32198",
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 2000,
temporal.res  = "P1Y",
aggregation = "mean",
resampling = "near") {
# Creating RSTACQuery  query
s <- rstac::stac(stac_path)
if (use.obs) {
if (inherits(obs, "data.frame")) {
# Reproject the obs to the data cube projection
proj.pts <- project_coords(obs, lon = lon, lat = lat, proj_from = srs.cube)
} else {
proj.pts <- obs
}
# Create the extent (data cube projection)
bbox.proj <- points_to_bbox(proj.pts, buffer = buffer.box)
left <- bbox.proj$xmin
right <- bbox.proj$xmax
bottom <- bbox.proj$ymin
top <- bbox.proj$ymax
# Create the bbxo (WGS84 projection)
bbox.wgs84 <- bbox.proj %>%
sf::st_bbox(crs = srs.cube) %>%
sf::st_as_sfc() %>%
sf::st_transform(crs = 4326) %>%
sf::st_bbox()
} else {
bbox.proj <- bbox
left <- bbox.proj$xmin
right <- bbox.proj$xmax
bottom <- bbox.proj$ymin
top <- bbox.proj$ymax
if (left > right) stop("left and right seem reversed")
if (bottom > top) stop("bottom and top seem reversed")
bbox.wgs84 <- c(left,
right,
top,
bottom) %>%
sf::st_bbox(crs = srs.cube) %>%
sf::st_as_sfc() %>%
sf::st_transform(crs = 4326) %>%
sf::st_bbox()
}
if (!is.null(t0)) {
# Create datetime object
datetime <- format(lubridate::as_datetime(t0), "%Y-%m-%dT%H:%M:%SZ")
} else {
it_obj_tmp <- s |> #think changing it for %>%
rstac::stac_search(bbox = bbox.wgs84, collections = collections) |> rstac::get_request()
datetime <- it_obj_tmp$features[[1]]$properties$datetime
t0 <- datetime
t1 <- datetime
}
if (!is.null(t1) && t1 != t0) {
datetime <- paste(datetime,
format(lubridate::as_datetime(t1), "%Y-%m-%dT%H:%M:%SZ"),
sep = "/")
}
RCurl::url.exists(stac_path)
# CreateRSTACQuery object with the subclass search containing all search field parameters
it_obj <- s |> #think changing it for %>%
rstac::stac_search(bbox = bbox.wgs84, collections = collections,
datetime = datetime) |> rstac::get_request()
if (is.null(spatial.res)) {
name1 <- unlist(lapply(it_obj$features, function(x){names(x$assets)}))[1]
spatial.res <-  it_obj$features[[1]]$assets[[name1]]$`raster:bands`[[1]]$spatial_resolution
}
# bbox in decimal lon/lat
# If no layers is selected, get all the layers by default
if (is.null(layers)) {
layers <- unlist(lapply(it_obj$features, function(x){names(x$assets)}))
}
#
# Creates an image collection
if(!is.null(variable)) {
st <- gdalcubes::stac_image_collection(it_obj$features, asset_names = layers,
property_filter = function(x) {x[["variable"]] %in% variable})
} else {
st <- gdalcubes::stac_image_collection(it_obj$features, asset_names = layers)
}
v <- gdalcubes::cube_view(srs = srs.cube,  extent = list(t0 = t0,  t1 = t1,
left = left, right = right,
top = top, bottom = bottom),
dx = spatial.res, dy = spatial.res, dt = temporal.res, aggregation = aggregation, resampling = resampling)
gdalcubes::gdalcubes_options(parallel = 4)
cube <- gdalcubes::raster_cube(st, v)
return(cube)
}
layers <- c("bio6", "bio13")
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = obs.coords.proj,
buffer.box = 0,
layers = layers,
srs.cube = srs.cube,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
cube
layers
cube %>% select_bands(c("bio6", "bio13")) %>%  plot()
srs.obs <-"EPSG:4326" # initial observations projection system
srs.cube <- "EPSG:6623" # targeted projected projection system
obs.coords.proj <- create_projection(obs, lon = "lon", lat = "lat",
srs.obs, srs.cube)
layers <- c("bio6", "bio13")
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = obs.coords.proj,
buffer.box = 0,
layers = layers,
srs.cube = srs.cube,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
cube
obs.coords.proj <- create_projection(presence, lon = "lon", lat = "lat",
srs.obs, srs.cube) %>% dplyr::select(lon, lat)
obs.coords.proj <- create_projection(obs_data, lon = "decimalLongitude", lat = "decimalLatitude",
proj_from = "+proj=longlat +datum=WGS84", proj_to = proj,new_lon = "lon", new_lat = "lat")
?raster_cube
?gdalcubes_options
v <- gdalcubes::cube_view(srs = srs.cube,  extent = list(t0 = t0,  t1 = t1,
left = left, right = right,
top = top, bottom = bottom),
dx = spatial.res, dy = spatial.res, dt = temporal.res, aggregation = aggregation, resampling = resampling)
t0 = "1981-01-01"
t1 = "1981-01-01"
v <- gdalcubes::cube_view(srs = srs.cube,  extent = list(t0 = t0,  t1 = t1,
left = left, right = right,
top = top, bottom = bottom),
dx = spatial.res, dy = spatial.res, dt = temporal.res, aggregation = aggregation, resampling = resampling)
left <- bbox.proj$xmin
# Create the extent (data cube projection)
bbox.proj <- points_to_bbox(proj.pts, buffer = buffer.box)
proj.pts = obs.coords.proj
# Create the extent (data cube projection)
bbox.proj <- points_to_bbox(proj.pts, buffer = buffer.box)
obs.coords.proj <- create_projection(obs_data, lon = "decimalLongitude", lat = "decimalLatitude",
proj_from = "+proj=longlat +datum=WGS84",
proj_to = proj,new_lon = "lon", new_lat = "lat") %>% dplyr::select(lon, lat)
layers <- c("bio6", "bio13")
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = obs.coords.proj,
buffer.box = 0,
layers = layers,
srs.cube = srs.cube,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
cube %>% select_bands(c("bio6", "bio13")) %>%  plot()
obs.coords.proj
obs.coords.proj
obs.coords.proj <- obs.coords.proj[1:1000,]
layers <- c("bio6", "bio13")
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = obs.coords.proj,
buffer.box = 0,
layers = layers,
srs.cube = srs.cube,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
cube %>% select_bands(c("bio6", "bio13")) %>%  plot()
cube
load_cube <- function(stac_path =
"http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c('chelsa-clim'),
use.obs = T,
obs = NULL,
lon = "lon",
lat = "lat",
buffer.box = 0,
bbox = NULL,
layers = NULL,
variable = NULL,
srs.cube = "EPSG:32198",
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 2000,
temporal.res  = "P1Y",
aggregation = "mean",
resampling = "near") {
# Creating RSTACQuery  query
s <- rstac::stac(stac_path)
if (use.obs) {
if (inherits(obs, "data.frame")) {
# Reproject the obs to the data cube projection
proj.pts <- project_coords(obs, lon = lon, lat = lat, proj_from = srs.cube)
} else {
proj.pts <- obs
}
# Create the extent (data cube projection)
bbox.proj <- points_to_bbox(proj.pts, buffer = buffer.box)
left <- bbox.proj$xmin
right <- bbox.proj$xmax
bottom <- bbox.proj$ymin
top <- bbox.proj$ymax
# Create the bbxo (WGS84 projection)
bbox.wgs84 <- bbox.proj %>%
sf::st_bbox(crs = srs.cube) %>%
sf::st_as_sfc() %>%
sf::st_transform(crs = 4326) %>%
sf::st_bbox()
} else {
bbox.proj <- bbox
left <- bbox.proj$xmin
right <- bbox.proj$xmax
bottom <- bbox.proj$ymin
top <- bbox.proj$ymax
if (left > right) stop("left and right seem reversed")
if (bottom > top) stop("bottom and top seem reversed")
bbox.wgs84 <- c(left,
right,
top,
bottom) %>%
sf::st_bbox(crs = srs.cube) %>%
sf::st_as_sfc() %>%
sf::st_transform(crs = 4326) %>%
sf::st_bbox()
}
if (!is.null(t0)) {
# Create datetime object
datetime <- format(lubridate::as_datetime(t0), "%Y-%m-%dT%H:%M:%SZ")
} else {
it_obj_tmp <- s |> #think changing it for %>%
rstac::stac_search(bbox = bbox.wgs84, collections = collections) |> rstac::get_request()
datetime <- it_obj_tmp$features[[1]]$properties$datetime
t0 <- datetime
t1 <- datetime
}
if (!is.null(t1) && t1 != t0) {
datetime <- paste(datetime,
format(lubridate::as_datetime(t1), "%Y-%m-%dT%H:%M:%SZ"),
sep = "/")
}
RCurl::url.exists(stac_path)
# CreateRSTACQuery object with the subclass search containing all search field parameters
it_obj <- s |> #think changing it for %>%
rstac::stac_search(bbox = bbox.wgs84, collections = collections,
datetime = datetime) |> rstac::get_request()
if (is.null(spatial.res)) {
name1 <- unlist(lapply(it_obj$features, function(x){names(x$assets)}))[1]
spatial.res <-  it_obj$features[[1]]$assets[[name1]]$`raster:bands`[[1]]$spatial_resolution
}
# bbox in decimal lon/lat
# If no layers is selected, get all the layers by default
if (is.null(layers)) {
layers <- unlist(lapply(it_obj$features, function(x){names(x$assets)}))
}
#
# Creates an image collection
if(!is.null(variable)) {
st <- gdalcubes::stac_image_collection(it_obj$features, asset_names = layers,
property_filter = function(x) {x[["variable"]] %in% variable})
} else {
st <- gdalcubes::stac_image_collection(it_obj$features, asset_names = layers)
}
v <- gdalcubes::cube_view(srs = srs.cube,  extent = list(t0 = t0,  t1 = t1,
left = left, right = right,
top = top, bottom = bottom),
dx = spatial.res, dy = spatial.res, dt = temporal.res, aggregation = aggregation, resampling = resampling)
gdalcubes::gdalcubes_options(parallel = T)
cube <- gdalcubes::raster_cube(st, v)
return(cube)
}
layers <- c("bio6", "bio13")
cube <-
load_cube(stac_path = "http://io.biodiversite-quebec.ca/stac/",
limit = 5000,
collections = c("chelsa-clim"),
use.obs = T,
obs = obs.coords.proj,
buffer.box = 0,
layers = layers,
srs.cube = srs.cube,
t0 = "1981-01-01",
t1 = "1981-01-01",
spatial.res = 1000, # in meters
temporal.res = "P1Y",
aggregation = "mean",
resampling = "near")
my.raster <- cube_to_raster(cube, format = "raster")
my.raster
bbox
cube
