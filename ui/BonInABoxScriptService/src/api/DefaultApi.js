/*
 * BON in a Box - Script service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jean-michel.lord@mcgill.ca
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse200} from '../model/InlineResponse200';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getScriptInfo operation.
     * @callback moduleapi/DefaultApi~getScriptInfoCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata about this script
     * @param {String} scriptPath Where to find the script in ./script folder
     * @param {module:api/DefaultApi~getScriptInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getScriptInfo(scriptPath, callback) {
      
      let postBody = null;
      // verify the required parameter 'scriptPath' is set
      if (scriptPath === undefined || scriptPath === null) {
        throw new Error("Missing the required parameter 'scriptPath' when calling getScriptInfo");
      }

      let pathParams = {
        'scriptPath': scriptPath
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/info/{scriptPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the runScript operation.
     * @callback moduleapi/DefaultApi~runScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run this script
     * Run the script specified in the URL. Must include the extension.
     * @param {String} scriptPath Where to find the script in ./script folder
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.params Additional parameters for the script
     * @param {module:api/DefaultApi~runScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    runScript(scriptPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scriptPath' is set
      if (scriptPath === undefined || scriptPath === null) {
        throw new Error("Missing the required parameter 'scriptPath' when calling runScript");
      }

      let pathParams = {
        'scriptPath': scriptPath
      };
      let queryParams = {
        'params': this.apiClient.buildCollectionParam(opts['params'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/script/{scriptPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}