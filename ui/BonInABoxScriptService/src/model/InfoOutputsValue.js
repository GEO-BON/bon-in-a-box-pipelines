/**
 * BON in a Box - Script service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jean-michel.lord@mcgill.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
//import InfoOutputsValueExample from './InfoOutputsValueExample';

/**
 * The InfoOutputsValue model module.
 * @module model/InfoOutputsValue
 * @version 1.0.0
 */
class InfoOutputsValue {
    /**
     * Constructs a new <code>InfoOutputsValue</code>.
     * @alias module:model/InfoOutputsValue
     */
    constructor() { 
        
        InfoOutputsValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InfoOutputsValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InfoOutputsValue} obj Optional instance to populate.
     * @return {module:model/InfoOutputsValue} The populated <code>InfoOutputsValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InfoOutputsValue();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], ['Number']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], ['String']);
            }
            if (data.hasOwnProperty('example')) {
                // JM Lord: Current version of the generator does not work when type is "oneOf" in OpenAPI spec.
                // We want the default convertToType clause to execute.
                obj['example'] = ApiClient.convertToType(data['example'], 'depends on type');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InfoOutputsValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InfoOutputsValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['range'])) {
            throw new Error("Expected the field `range` to be an array in the JSON data but got " + data['range']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['properties'])) {
            throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
        }
        // validate the optional field `example`
        if (data['example']) { // data not null
          // JM Lord: Current version of the generator does not work when type is "oneOf" in OpenAPI spec.
          //InfoOutputsValueExample.validateJSON(data['example']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
InfoOutputsValue.prototype['description'] = undefined;

/**
 * @member {String} label
 */
InfoOutputsValue.prototype['label'] = undefined;

/**
 * @member {String} type
 */
InfoOutputsValue.prototype['type'] = undefined;

/**
 * @member {Array.<Number>} range
 */
InfoOutputsValue.prototype['range'] = undefined;

/**
 * @member {Array.<String>} options
 */
InfoOutputsValue.prototype['options'] = undefined;

/**
 * @member {Array.<String>} properties
 */
InfoOutputsValue.prototype['properties'] = undefined;

/**
 * @member {module:model/InfoOutputsValueExample} example
 */
InfoOutputsValue.prototype['example'] = undefined;






export default InfoOutputsValue;

