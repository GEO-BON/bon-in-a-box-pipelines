#!/usr/bin/python3
# Script generated by Copilot and edited

import os
import re
from statistics import mean
import sys

# Function to recursively find all 'logs.txt' files
def find_log_files(root_dir):
    log_files = []
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            if filename == "logs.txt":
                log_files.append(os.path.join(dirpath, filename))
    return log_files

# Function to parse R garbage collection table
def parse_gc_table(log_content):
    gc_pattern = r"Ncells(\s+[\d.]+){5}\s+([\d.]+).*?Vcells(\s+[\d.]+){5}\s+([\d.]+)"
    match = re.search(gc_pattern, log_content, re.DOTALL)
    if match:
        ncells_mb = float(match.group(2))
        vcells_mb = float(match.group(4))
        total_mb = ncells_mb + vcells_mb
        print(f"\t{total_mb:.1f} mb")
        return total_mb

    print("\t! No stats found")
    return None

# Function to parse elapsed time string
def parse_elapsed_time(log_content):
    elapsed_pattern = r"Elapsed:\s*(\d+)?h?\s*(\d+)?m?\s+([\d.]+)s"
    match = re.search(elapsed_pattern, log_content)
    if match:
        hours = int(match.group(1)) if match.group(1) is not None else 0
        minutes = int(match.group(2)) if match.group(2) is not None else 0
        seconds = float(match.group(3))
        print(f"\t{hours}h {minutes}m {seconds}s")
        total_seconds = hours * 60 + minutes + seconds / 60
        return total_seconds

    print("\t! No time found")
    return None

# Main function to process logs and compute statistics
def process_logs(root_dir):
    log_files = find_log_files(root_dir)
    memory_usages = []
    elapsed_times = []

    for log_file in log_files:
        print("reading", log_file)
        with open(log_file, 'r', encoding='utf-8') as f:
            content = f.read()
            if "Error: script returned non-zero value" in content:
                print("\t! Skipped: finished with error")
                continue

            if "Cancelled by user: " in content:
                print("\t! Skipped: cancelled")
                continue

            memory = parse_gc_table(content)
            time = parse_elapsed_time(content)

            if memory is not None:
                memory_usages.append(memory)
            if time is not None:
                elapsed_times.append(time)

    # Compute statistics
    if memory_usages:
        print("\nPeak memory Usage in MB: (currently compiled for R scripts only!)")
        print(f"  Max: {max(memory_usages):.2f}")
        print(f"  Min: {min(memory_usages):.2f}")
        print(f"  Mean: {mean(memory_usages):.2f}")
        print("Compiled", len(memory_usages), "memory usages")
    else:
        print("No valid memory usage data found.")

    if elapsed_times:
        print("\nElapsed Time in minutes:")
        print(f"  Max: {max(elapsed_times):.3f}")
        print(f"  Min: {min(elapsed_times):.3f}")
        print(f"  Mean: {mean(elapsed_times):.3f}")
        print("Compiled", len(elapsed_times), "times")
    else:
        print("No valid elapsed time data found.")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <target_directory>")
        print("This script parses the target ouput directory logs and compiles run statistics.")
        sys.exit(1)

    target_directory = sys.argv[1]
    process_logs(target_directory)