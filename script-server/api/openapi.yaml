openapi: 3.0.1
info:
  title: BON in a Box - Script service
  contact:
    email: jean-michel.lord@mcgill.ca
  version: 1.0.0
servers:
  - url: http://localhost/
    description: script service (from outside dockers only)
  - url: http://biab-script-server:8080
    description: script service (from inside dockers only)
tags:
  - name: placeholder
    description: We could use tags
paths:
  /{type}/list:
    get:
      summary: Get a list of available steps of given type
      operationId: getStepList
      parameters:
        - $ref: '#/components/parameters/stepType'
      responses:
        "200":
          description:
            Array of step description files.
            Script description files are located in the /script folder.
            Pipeline description files are located in the /pipeline folder.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["SHI.yml", "Folder>SDM.yml"]
  /{type}/{descriptionPath}/info:
    get:
      tags: []
      summary: Get metadata about this step
      operationId: getStepInfo
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/descriptionPath'
      responses:
        "200":
          description: Returns the metadata, in JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info'
        "400":
          description: Bad request
        "404":
          description: Step not found
  /pipeline/{descriptionPath}/get:
    get:
      summary: Get JSON file that describes the pipeline.
      operationId: getPipeline
      parameters:
        - $ref: '#/components/parameters/descriptionPath'
      responses:
        "200":
          description: Returns the complete pipeline, in JSON format
          content:
            application/json:
              schema:
                type: object
                nullable: false
              example: 
                {
                  "nodes": [
                    {
                      "id": "0",
                      "type": "io",
                      "position": {
                        "x": 236.8125,
                        "y": 287
                      },
                      "data": {
                        "descriptionFile": "helloWorld>helloPython.yml"
                      }
                    },
                    {
                      "id": "1",
                      "type": "output",
                      "position": {
                        "x": 593.8125,
                        "y": 289
                      },
                      "data": {
                        "label": "Output"
                      }
                    }
                  ],
                  "edges": [
                    {
                      "source": "0",
                      "sourceHandle": "increment",
                      "target": "1",
                      "targetHandle": null,
                      "id": "reactflow__edge-0increment-1"
                    }
                  ],
                  "inputs": {
                    "helloWorld>helloPython.yml@0|some_int": {
                      "description": "A number that we will increment",
                      "label": "Some int",
                      "type": "int",
                      "example": 3
                    }
                  },
                  "outputs": {
                    "helloWorld>helloPython.yml@0|increment": {
                      "description": "bla bla",
                      "label": "A number (input++)",
                      "type": "int",
                      "example": 4
                    }
                  }
                }
        "400":
          description: Bad request
        "404":
          description: Pipeline not found
  /{type}/{descriptionPath}/run:
    post:
      tags: []
      summary: Runs the script or pipeline matching `descriptionPath`.
      operationId: run
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/descriptionPath'
      requestBody:
        $ref: '#/components/requestBodies/run_input_body'
      responses:
        "200":
          description:
            Returns the unique ID for this run.
            It corresponds to the unique output folder.
          content:
            text/plain:
              schema:
                type: string
                example: "HelloWorld/Hello World/88204814d39b762f933d67d9a3d68832"
                x-content-type: text/plain
        "400":
          description: Bad request
        "404":
          description: Script or pipeline not found
  /{type}/{id}/outputs:
    get:
      tags: []
      summary: Get the output folders of the scripts composing this pipeline
      operationId: getOutputFolders
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/runId'
      responses:
        "200":
          description: List of output folders for all the scripts
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  id1: Folder/Script_ext/88204814d39b762f933d67d9a3d68832
                  id2: Folder/Script2/1a015dccdfb7f639ec32c278506e7c5a
        "400":
          description: Bad request
        "404":
          description: id not found
  /{type}/{id}/stop:
    get:
      summary: Stop the specified pipeline run
      operationId: stop
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/runId'
      responses:
        "200":
          description: Pipeline run is stopped (or was already stopped)
        "400":
          description: Bad request
        "404":
          description: id not found
components:
  parameters:
    stepType:
      name: type
      in: path
      description: Script or pipeline
      required: true
      style: simple
      explode: false
      schema:
        type: string
        enum: [script, pipeline]
    descriptionPath:
      name: descriptionPath
      in: path
      description:
        Where to find the step. 
        For scripts, paths are relative to the /script folder. 
        For pipelines, paths are relative to the /pipeline folder.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    runId:
      name: id
      in: path
      description: Where to find the pipeline in ./script folder.
      required: true
      style: simple
      explode: false
      schema:
        type: string
  schemas:
    info:
      type: object
      properties:
        script: 
          type: string
          example: helloR.R
        description: 
          type: string
          example: This sample script shows how it works.
        external_link: 
          type: string
          example: https://github.com/GEO-BON/biab-2.0
        timeout:
          type: number
          example: 60
        inputs: 
          type: object
          additionalProperties: 
            type: object
            properties: 
              description: 
                type: string
                example: scientific name of the species
              label: 
                type: string
                example: species names
              type: 
                type: string
                example: text
              options: 
                type: array
                items:
                  type: string
                example:
                - Option 1
                - Option 2
              properties:
                type: array
                items: 
                  type: string
                example: 
                  - id
                  - layer
              example: 
                example: Glyptemys insculpta
                oneOf:
                - type: string
                - type: number
                - type: boolean
                - type: array
                  items:
                    oneOf:
                    - type: string
                    - type: number
                    - type: boolean
        outputs: 
          type: object
          additionalProperties: 
            type: object
            properties: 
              description: 
                type: string
                example: coordinate of occurances in 
              label: 
                type: string
                example: occurences
              type: 
                type: string
                example: text/csv
              range: 
                type: array
                items:
                  type: number
                minItems: 2
                maxItems: 2
                example: [0, 1]
              options: 
                type: array
                items:
                  type: string
                example:
                - Option 1
                - Option 2
              properties:
                type: array
                items: 
                  type: string
                example: 
                  - id
                  - layer
              example: 
                example: file.csv
                oneOf:
                - type: string
                - type: number
                - type: boolean
                - type: array
                  items:
                    oneOf:
                    - type: string
                    - type: number
                    - type: boolean
        references: 
          type: array
          items: 
            type: object
            properties: 
              text: 
                type: string
                example: Rick Bonney Expanding the Impact of Citizen Science BioScience Volume 71 Issue 5 May 2021 Pages 448â€“451
              doi: 
                type: string
                example: 10.1093/biosci/biab041
  requestBodies:
    run_input_body:
      description: Content of input.json for this run
      required: false
      content:
        text/plain:
          schema:
            type: string
            example: 
              { 
                "occurence":"/output/result/from/previous/script", 
                "intensity":3
              }
