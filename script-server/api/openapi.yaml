openapi: 3.0.1
info:
  title: BON in a Box - Script service
  contact:
    email: jean-michel.lord@mcgill.ca
  version: 1.0.0
servers:
- url: http://localhost/
  description: script service (from outside dockers only)
- url: http://biab-script-server:8080
  description: script service (from inside dockers only)
tags:
- name: placeholder
  description: We could use tags
paths:
  /script/list:
    get:
      summary: Get a list of available scripts
      responses:
        "200":
          description: Array of script description files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["HelloWorld.yml", "RunSDM.yml","SHI.yml"]
  /script/{scriptPath}/run:
    post:
      tags: []
      summary: Run this script
      description: Run the script specified in the URL. Must include the extension.
      operationId: runScript
      parameters:
      - name: scriptPath
        in: path
        description: Where to find the script in ./script folder
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/run_input_body'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/script_run_result'
        "400":
          description: Bad request
        "404":
          description: Script not found
  /script/{scriptPath}/info:
    get:
      tags: []
      summary: Get metadata about this script
      operationId: getScriptInfo
      parameters:
      - name: scriptPath
        in: path
        description: Where to find the script in ./script folder.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the metadata, in YAML format
          content:
            text/plain:
              schema:
                type: string
                example: "
                          script:
                          inputs:
                          outputs:
                          description:
                          external_link:
                          references:
                          "
                x-content-type: text/plain
        "400":
          description: Bad request
        "404":
          description: Script not found
  /pipeline/list:
    get:
      summary: Get a list of available pipelines
      responses:
        "200":
          description: Array of pipeline description files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["SHI.yml", "Folder>SDM.yml"]
  /pipeline/{descriptionPath}/info:
    get:
      tags: []
      summary: Get metadata about this pipeline
      operationId: getPipelineInfo
      parameters:
      - name: descriptionPath
        in: path
        description: Where to find the pipeline in ./pipeline folder.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the metadata, in YAML format
          content:
            text/plain:
              schema:
                type: string
                example: "
                          inputs:
                          outputs:
                          description:
                          external_link:
                          references:
                          definition:
                          "
                x-content-type: text/plain
        "400":
          description: Bad request
        "404":
          description: Script not found
  /pipeline/{descriptionPath}/run:
    get:
      tags: []
      summary: Run this pipeline
      operationId: runPipeline
      parameters:
      - name: descriptionPath
        in: path
        description: Where to find the script in ./script folder.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the unique ID for this run. It corresponds to the unique output folder.
          content:
            text/plain:
              schema:
                type: string
                example: "HelloWorld/Hello World/88204814d39b762f933d67d9a3d68832"
                x-content-type: text/plain
        "400":
          description: Bad request
        "404":
          description: Script not found
  /pipeline/{id}/outputs:
    get:
      tags: []
      summary: Get the output folders of the scripts composing this pipeline
      operationId: getPipelineOutputs
      parameters:
      - name: id
        in: path
        description: Where to find the pipeline in ./script folder.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of output folders for all the scripts (relative paths to output root)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["Folder/Script_ext/88204814d39b762f933d67d9a3d68832", "Folder/Script2/1a015dccdfb7f639ec32c278506e7c5a"]
        "400":
          description: Bad request
        "404":
          description: id not found
components:
  schemas:
    script_run_result:
      type: object
      properties:
        logs:
          type: string
        error:
          type: boolean
        files:
          type: object
          additionalProperties:
            type: string
      example:
        files:
          presence: presence.tiff
          uncertainty: uncertainty.tiff
        logs: Starting... Script completed!
      xml:
        name: Result
  requestBodies:
    run_input_body:
      description: Content of input.json for this run
      required: false
      content:
        text/plain:
          schema:
            type: string
            example: '{ 
              "occurence":"/output/result/from/previous/script", 
              "intensity":3
            } '
