FROM gradle:6.9.2-jdk11

## Install Julia (code from https://github.com/docker-library/julia/blob/37e7c4dbca1f313e7c297f51c600615ceafb8a43/1.7/bullseye/Dockerfile)
ENV JULIA_PATH /usr/local/julia
ENV PATH $JULIA_PATH/bin:$PATH

# https://julialang.org/juliareleases.asc
# Julia (Binary signing key) <buildbot@julialang.org>
ENV JULIA_GPG 3673DF529D9049477F76B37566E3C7DC03D6E495

# https://julialang.org/downloads/
ENV JULIA_VERSION 1.7.1


RUN set -eux; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
		if ! command -v gpg > /dev/null; then \
		apt-get update; \
		apt-get install -y --no-install-recommends \
			gnupg \
			dirmngr \
		; \
		rm -rf /var/lib/apt/lists/*; \
	fi; \
		\
# https://julialang.org/downloads/#julia-command-line-version
# https://julialang-s3.julialang.org/bin/checksums/julia-1.7.1.sha256
	arch="$(dpkg --print-architecture)"; \
	case "$arch" in \
		'amd64') \
			url='https://julialang-s3.julialang.org/bin/linux/x64/1.7/julia-1.7.1-linux-x86_64.tar.gz'; \
			sha256='44658e9c7b45e2b9b5b59239d190cca42de05c175ea86bc346c294a8fe8d9f11'; \
			;; \
		'arm64') \
			url='https://julialang-s3.julialang.org/bin/linux/aarch64/1.7/julia-1.7.1-linux-aarch64.tar.gz'; \
			sha256='5d9f23916d331f54a2bb68936c2c7fbf3fdb4a6f7bfbb99750276cc23a292a4d'; \
			;; \
		'i386') \
			url='https://julialang-s3.julialang.org/bin/linux/x86/1.7/julia-1.7.1-linux-i686.tar.gz'; \
			sha256='6b5f7a235dc51b586d6ab914042b6d91c8634eeeb011636460ab6dcbf5671fac'; \
			;; \
		*) \
			echo >&2 "error: current architecture ($arch) does not have a corresponding Julia binary release"; \
			exit 1; \
			;; \
	esac; \
	\
	curl -fL -o julia.tar.gz.asc "$url.asc"; \
	curl -fL -o julia.tar.gz "$url"; \
	\
	echo "$sha256 *julia.tar.gz" | sha256sum --strict --check -; \
	\
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$JULIA_GPG"; \
	gpg --batch --verify julia.tar.gz.asc julia.tar.gz; \
	command -v gpgconf > /dev/null && gpgconf --kill all; \
	rm -rf "$GNUPGHOME" julia.tar.gz.asc; \
	\
	mkdir "$JULIA_PATH"; \
	tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1; \
	rm julia.tar.gz; \
	\
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
	julia -e 'using Pkg; Pkg.add.(["SimpleSDMLayers", "JSON"]); Pkg.instantiate();'

## Install R
# First RUN command to install R-base
ENV R_BASE_VERSION 4.1.2
RUN set -ex; \
    apt-get update; \
    apt-get install --no-install-recommends -y \
        # Remove "debconf: delaying package configuration, since apt-utils is not installed"
        apt-utils \
        # Next 2 necessary to call add-apt-repository
        lsb-release \
        software-properties-common; \
    # As per https://cloud.r-project.org/bin/linux/ubuntu/
    wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc; \
    add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"; \
    add-apt-repository ppa:c2d4u.team/c2d4u4.0+; \
    apt-get update; \
    \
    # R installation \
    apt-get install -y --no-install-recommends \
        r-base=${R_BASE_VERSION}-* \
		r-base-dev=${R_BASE_VERSION}-* \
        r-base-core=${R_BASE_VERSION}-* \
		r-recommended=${R_BASE_VERSION}-* \
    Rscript --version; \
    apt-get clean all;

# Second RUN command to be able to compile some packages on the fly
RUN apt-get update; \
    apt-get install -y --no-install-recommends build-essential gfortran;

#INSTALL DOCKER CLI 
ENV DOCKER_VERSION=20.10.9
RUN curl -sfL -o docker.tgz "https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz" && \
  tar -xzf docker.tgz docker/docker --strip=1 && \
  mv docker /usr/local/bin && \
  rm docker.tgz


RUN curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
RUN chmod +x /usr/local/bin/docker-compose

# Third RUN command to install some pre-built r libs
RUN set -ex; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        libgdal-dev \
        libproj-dev \
        libudunits2-dev \
        r-cran-devtools \
        r-cran-rjson \
        r-cran-rcppeigen \
        r-cran-rjava ;\
    apt-get clean all;

# If there is something missing in the R installation, we can check what is done here for inspiration: 
# https://github.com/rocker-org/rocker/blob/master/r-base/latest/Dockerfile

RUN set -ex; \
    apt-get update; \
    apt-get install -y --no-install-recommends python3; \
    apt-get clean all;
